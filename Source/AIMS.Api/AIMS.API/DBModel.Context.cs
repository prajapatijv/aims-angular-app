//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AIMS.API
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AIMS_DBEntities : DbContext
    {
        public AIMS_DBEntities()
            : base("name=AIMS_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BillSequence> BillSequences { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<EventMast> EventMasts { get; set; }
        public virtual DbSet<FormCollection> FormCollections { get; set; }
        public virtual DbSet<Invdet> Invdets { get; set; }
        public virtual DbSet<Invtrn> Invtrns { get; set; }
        public virtual DbSet<ItemBarcode> ItemBarcodes { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<KeybrdItem> KeybrdItems { get; set; }
        public virtual DbSet<KeybrdSetup> KeybrdSetups { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Saldet> Saldets { get; set; }
        public virtual DbSet<Saltrn> Saltrns { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<TerminalConfig> TerminalConfigs { get; set; }
        public virtual DbSet<TerSaldet> TerSaldets { get; set; }
        public virtual DbSet<TerSaltrn> TerSaltrns { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UserMast> UserMasts { get; set; }
        public virtual DbSet<UserRight> UserRights { get; set; }
        public virtual DbSet<ServerExport> ServerExports { get; set; }
        public virtual DbSet<tmpReportSource> tmpReportSources { get; set; }
    
        public virtual ObjectResult<rptInventoryDetail_Result> rptInventoryDetail(string from_dt, string to_dt, Nullable<short> terId, Nullable<short> userId, Nullable<byte> tran_type, Nullable<short> itemId, Nullable<short> categoryId, Nullable<short> sizeId, Nullable<short> unitId, string grp_by, Nullable<int> vno, Nullable<byte> previewEnabled)
        {
            var from_dtParameter = from_dt != null ?
                new ObjectParameter("from_dt", from_dt) :
                new ObjectParameter("from_dt", typeof(string));
    
            var to_dtParameter = to_dt != null ?
                new ObjectParameter("to_dt", to_dt) :
                new ObjectParameter("to_dt", typeof(string));
    
            var terIdParameter = terId.HasValue ?
                new ObjectParameter("TerId", terId) :
                new ObjectParameter("TerId", typeof(short));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(short));
    
            var tran_typeParameter = tran_type.HasValue ?
                new ObjectParameter("Tran_type", tran_type) :
                new ObjectParameter("Tran_type", typeof(byte));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(short));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(short));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(short));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(short));
    
            var grp_byParameter = grp_by != null ?
                new ObjectParameter("grp_by", grp_by) :
                new ObjectParameter("grp_by", typeof(string));
    
            var vnoParameter = vno.HasValue ?
                new ObjectParameter("vno", vno) :
                new ObjectParameter("vno", typeof(int));
    
            var previewEnabledParameter = previewEnabled.HasValue ?
                new ObjectParameter("PreviewEnabled", previewEnabled) :
                new ObjectParameter("PreviewEnabled", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptInventoryDetail_Result>("rptInventoryDetail", from_dtParameter, to_dtParameter, terIdParameter, userIdParameter, tran_typeParameter, itemIdParameter, categoryIdParameter, sizeIdParameter, unitIdParameter, grp_byParameter, vnoParameter, previewEnabledParameter);
        }
    
        public virtual ObjectResult<rptInventorySummary_Result> rptInventorySummary(string from_dt, string to_dt, Nullable<short> terId, Nullable<short> userId, Nullable<byte> tran_type, Nullable<byte> previewEnabled)
        {
            var from_dtParameter = from_dt != null ?
                new ObjectParameter("from_dt", from_dt) :
                new ObjectParameter("from_dt", typeof(string));
    
            var to_dtParameter = to_dt != null ?
                new ObjectParameter("to_dt", to_dt) :
                new ObjectParameter("to_dt", typeof(string));
    
            var terIdParameter = terId.HasValue ?
                new ObjectParameter("TerId", terId) :
                new ObjectParameter("TerId", typeof(short));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(short));
    
            var tran_typeParameter = tran_type.HasValue ?
                new ObjectParameter("Tran_type", tran_type) :
                new ObjectParameter("Tran_type", typeof(byte));
    
            var previewEnabledParameter = previewEnabled.HasValue ?
                new ObjectParameter("PreviewEnabled", previewEnabled) :
                new ObjectParameter("PreviewEnabled", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptInventorySummary_Result>("rptInventorySummary", from_dtParameter, to_dtParameter, terIdParameter, userIdParameter, tran_typeParameter, previewEnabledParameter);
        }
    
        public virtual ObjectResult<rptItemList_Result> rptItemList(string includeCategory, string includeItem, Nullable<byte> previewEnabled, Nullable<byte> repeatLabelCount, Nullable<byte> isPaymentLabel)
        {
            var includeCategoryParameter = includeCategory != null ?
                new ObjectParameter("IncludeCategory", includeCategory) :
                new ObjectParameter("IncludeCategory", typeof(string));
    
            var includeItemParameter = includeItem != null ?
                new ObjectParameter("IncludeItem", includeItem) :
                new ObjectParameter("IncludeItem", typeof(string));
    
            var previewEnabledParameter = previewEnabled.HasValue ?
                new ObjectParameter("PreviewEnabled", previewEnabled) :
                new ObjectParameter("PreviewEnabled", typeof(byte));
    
            var repeatLabelCountParameter = repeatLabelCount.HasValue ?
                new ObjectParameter("RepeatLabelCount", repeatLabelCount) :
                new ObjectParameter("RepeatLabelCount", typeof(byte));
    
            var isPaymentLabelParameter = isPaymentLabel.HasValue ?
                new ObjectParameter("isPaymentLabel", isPaymentLabel) :
                new ObjectParameter("isPaymentLabel", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptItemList_Result>("rptItemList", includeCategoryParameter, includeItemParameter, previewEnabledParameter, repeatLabelCountParameter, isPaymentLabelParameter);
        }
    
        public virtual ObjectResult<rptKeybrdConfiguration_Result> rptKeybrdConfiguration(Nullable<decimal> iKbdCode, Nullable<byte> previewEnabled)
        {
            var iKbdCodeParameter = iKbdCode.HasValue ?
                new ObjectParameter("iKbdCode", iKbdCode) :
                new ObjectParameter("iKbdCode", typeof(decimal));
    
            var previewEnabledParameter = previewEnabled.HasValue ?
                new ObjectParameter("PreviewEnabled", previewEnabled) :
                new ObjectParameter("PreviewEnabled", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptKeybrdConfiguration_Result>("rptKeybrdConfiguration", iKbdCodeParameter, previewEnabledParameter);
        }
    
        public virtual ObjectResult<rptSalesDetail_Result> rptSalesDetail(string from_dt, string to_dt, Nullable<short> terId, Nullable<short> userId, Nullable<byte> status, Nullable<short> itemId, Nullable<short> categoryId, Nullable<short> sizeId, Nullable<short> unitId, string grp_by, string trans_id, Nullable<byte> genAt, Nullable<byte> previewEnabled)
        {
            var from_dtParameter = from_dt != null ?
                new ObjectParameter("from_dt", from_dt) :
                new ObjectParameter("from_dt", typeof(string));
    
            var to_dtParameter = to_dt != null ?
                new ObjectParameter("to_dt", to_dt) :
                new ObjectParameter("to_dt", typeof(string));
    
            var terIdParameter = terId.HasValue ?
                new ObjectParameter("TerId", terId) :
                new ObjectParameter("TerId", typeof(short));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(short));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(short));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(short));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(short));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(short));
    
            var grp_byParameter = grp_by != null ?
                new ObjectParameter("grp_by", grp_by) :
                new ObjectParameter("grp_by", typeof(string));
    
            var trans_idParameter = trans_id != null ?
                new ObjectParameter("trans_id", trans_id) :
                new ObjectParameter("trans_id", typeof(string));
    
            var genAtParameter = genAt.HasValue ?
                new ObjectParameter("GenAt", genAt) :
                new ObjectParameter("GenAt", typeof(byte));
    
            var previewEnabledParameter = previewEnabled.HasValue ?
                new ObjectParameter("PreviewEnabled", previewEnabled) :
                new ObjectParameter("PreviewEnabled", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptSalesDetail_Result>("rptSalesDetail", from_dtParameter, to_dtParameter, terIdParameter, userIdParameter, statusParameter, itemIdParameter, categoryIdParameter, sizeIdParameter, unitIdParameter, grp_byParameter, trans_idParameter, genAtParameter, previewEnabledParameter);
        }
    
        public virtual ObjectResult<rptSalesSummary_Result> rptSalesSummary(string from_dt, string to_dt, Nullable<short> terId, Nullable<short> userId, Nullable<byte> status, Nullable<byte> genAt, Nullable<byte> previewEnabled)
        {
            var from_dtParameter = from_dt != null ?
                new ObjectParameter("from_dt", from_dt) :
                new ObjectParameter("from_dt", typeof(string));
    
            var to_dtParameter = to_dt != null ?
                new ObjectParameter("to_dt", to_dt) :
                new ObjectParameter("to_dt", typeof(string));
    
            var terIdParameter = terId.HasValue ?
                new ObjectParameter("TerId", terId) :
                new ObjectParameter("TerId", typeof(short));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(short));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var genAtParameter = genAt.HasValue ?
                new ObjectParameter("GenAt", genAt) :
                new ObjectParameter("GenAt", typeof(byte));
    
            var previewEnabledParameter = previewEnabled.HasValue ?
                new ObjectParameter("PreviewEnabled", previewEnabled) :
                new ObjectParameter("PreviewEnabled", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptSalesSummary_Result>("rptSalesSummary", from_dtParameter, to_dtParameter, terIdParameter, userIdParameter, statusParameter, genAtParameter, previewEnabledParameter);
        }
    
        public virtual ObjectResult<stpBarcodeItem_Result> stpBarcodeItem(string barcode)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpBarcodeItem_Result>("stpBarcodeItem", barcodeParameter);
        }
    
        public virtual ObjectResult<stpFetchItemCategory_Result> stpFetchItemCategory(Nullable<short> keybrd_code)
        {
            var keybrd_codeParameter = keybrd_code.HasValue ?
                new ObjectParameter("keybrd_code", keybrd_code) :
                new ObjectParameter("keybrd_code", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpFetchItemCategory_Result>("stpFetchItemCategory", keybrd_codeParameter);
        }
    
        public virtual ObjectResult<stpFetchTicket_Result> stpFetchTicket(string tran_Id)
        {
            var tran_IdParameter = tran_Id != null ?
                new ObjectParameter("Tran_Id", tran_Id) :
                new ObjectParameter("Tran_Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpFetchTicket_Result>("stpFetchTicket", tran_IdParameter);
        }
    
        public virtual ObjectResult<stpFetchTicketList_Result> stpFetchTicketList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpFetchTicketList_Result>("stpFetchTicketList");
        }
    
        public virtual ObjectResult<Nullable<decimal>> stpGetDenomsBreakUp(Nullable<decimal> amt)
        {
            var amtParameter = amt.HasValue ?
                new ObjectParameter("Amt", amt) :
                new ObjectParameter("Amt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("stpGetDenomsBreakUp", amtParameter);
        }
    
        public virtual int stpImportFromMdb2Sql(string mdbPath, string tableName, Nullable<bool> isEmptyTable)
        {
            var mdbPathParameter = mdbPath != null ?
                new ObjectParameter("MdbPath", mdbPath) :
                new ObjectParameter("MdbPath", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var isEmptyTableParameter = isEmptyTable.HasValue ?
                new ObjectParameter("IsEmptyTable", isEmptyTable) :
                new ObjectParameter("IsEmptyTable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpImportFromMdb2Sql", mdbPathParameter, tableNameParameter, isEmptyTableParameter);
        }
    
        public virtual int stpImportFromMdb2Sql_Saltrn(string mdbPath)
        {
            var mdbPathParameter = mdbPath != null ?
                new ObjectParameter("MdbPath", mdbPath) :
                new ObjectParameter("MdbPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpImportFromMdb2Sql_Saltrn", mdbPathParameter);
        }
    
        public virtual ObjectResult<stpItemKeybrdList_Result> stpItemKeybrdList(Nullable<decimal> iCategoryId, Nullable<decimal> iKbdCode)
        {
            var iCategoryIdParameter = iCategoryId.HasValue ?
                new ObjectParameter("iCategoryId", iCategoryId) :
                new ObjectParameter("iCategoryId", typeof(decimal));
    
            var iKbdCodeParameter = iKbdCode.HasValue ?
                new ObjectParameter("iKbdCode", iKbdCode) :
                new ObjectParameter("iKbdCode", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpItemKeybrdList_Result>("stpItemKeybrdList", iCategoryIdParameter, iKbdCodeParameter);
        }
    
        public virtual ObjectResult<stpOPCL_Result> stpOPCL(string from_dt, string to_dt, Nullable<short> categoryId, Nullable<short> itemId, Nullable<byte> previewEnabled)
        {
            var from_dtParameter = from_dt != null ?
                new ObjectParameter("from_dt", from_dt) :
                new ObjectParameter("from_dt", typeof(string));
    
            var to_dtParameter = to_dt != null ?
                new ObjectParameter("to_dt", to_dt) :
                new ObjectParameter("to_dt", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(short));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(short));
    
            var previewEnabledParameter = previewEnabled.HasValue ?
                new ObjectParameter("PreviewEnabled", previewEnabled) :
                new ObjectParameter("PreviewEnabled", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpOPCL_Result>("stpOPCL", from_dtParameter, to_dtParameter, categoryIdParameter, itemIdParameter, previewEnabledParameter);
        }
    }
}
